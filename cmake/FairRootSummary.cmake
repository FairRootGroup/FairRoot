################################################################################
# Copyright (C) 2020 GSI Helmholtzzentrum fuer Schwerionenforschung GmbH       #
#                                                                              #
#              This software is distributed under the terms of the             #
#              GNU Lesser General Public Licence (LGPL) version 3,             #
#                  copied verbatim in the file "LICENSE"                       #
################################################################################

# Defines some variables with console color escape sequences
if(NOT WIN32 AND NOT DISABLE_COLOR)
  string(ASCII 27 Esc)
  set(CR       "${Esc}[m")
  set(CB       "${Esc}[1m")
  set(Red      "${Esc}[31m")
  set(Green    "${Esc}[32m")
  set(Yellow   "${Esc}[33m")
  set(Blue     "${Esc}[34m")
  set(Magenta  "${Esc}[35m")
  set(Cyan     "${Esc}[36m")
  set(White    "${Esc}[37m")
  set(BRed     "${Esc}[1;31m")
  set(BGreen   "${Esc}[1;32m")
  set(BYellow  "${Esc}[1;33m")
  set(BBlue    "${Esc}[1;34m")
  set(BMagenta "${Esc}[1;35m")
  set(BCyan    "${Esc}[1;36m")
  set(BWhite   "${Esc}[1;37m")
endif()

function(fairroot_pad str width char out)
  cmake_parse_arguments(ARGS "" "COLOR" "" ${ARGN})
  string(LENGTH ${str} length)
  if(ARGS_COLOR)
    math(EXPR padding "${width}-(${length}-10*${ARGS_COLOR})")
  else()
    math(EXPR padding "${width}-${length}")
  endif()
  if(padding GREATER 0)
    foreach(i RANGE ${padding})
      set(str "${str}${char}")
    endforeach()
  endif()
  set(${out} ${str} PARENT_SCOPE)
endfunction()

macro(fairroot_summary_package_prefix_load)
  if(Boost_FOUND)
    if(TARGET Boost::headers)
      get_target_property(boost_include Boost::headers INTERFACE_INCLUDE_DIRECTORIES)
    else()
      get_target_property(boost_include Boost::boost INTERFACE_INCLUDE_DIRECTORIES)
    endif()
    get_filename_component(Boost_PREFIX ${boost_include}/.. ABSOLUTE)
    unset(boost_include)
  endif()

  if(Protobuf_FOUND)
    get_filename_component(Protobuf_PREFIX ${Protobuf_INCLUDE_DIRS}/.. ABSOLUTE)
  endif()

  if(msgpack_FOUND)
    get_target_property(msgpack_include msgpackc INTERFACE_INCLUDE_DIRECTORIES)
    get_filename_component(msgpack_PREFIX ${msgpack_include}/.. ABSOLUTE)
    unset(msgpack_include)
  endif()

  if(GTest_FOUND)
    get_filename_component(GTest_PREFIX ${GTEST_INCLUDE_DIRS}/.. ABSOLUTE)
  endif()

  if(DDS_FOUND)
    if(DDS_VERSION VERSION_LESS 2.4)
      get_filename_component(DDS_PREFIX ${DDS_INCLUDE_DIR}/.. ABSOLUTE)
    else()
      set(DDS_PREFIX "${DDS_INSTALL_PREFIX}")
    endif()
  endif()

  if(FairLogger_FOUND)
    if(NOT FairLogger_PREFIX)
      set(FairLogger_PREFIX ${FairLogger_ROOT})
    endif()
  endif()

  if(FairMQ_FOUND)
    if(NOT FairMQ_PREFIX)
      set(FairMQ_PREFIX ${FairMQ_ROOT})
    endif()
  endif()

  if(yaml-cpp_FOUND)
    get_filename_component(yaml-cpp_PREFIX ${YAML_CPP_INCLUDE_DIR}/.. ABSOLUTE)
  endif()

  if(VGM_FOUND)
    string(REPLACE ":" ";" vgm_include ${VGM_INCLUDE_DIRS})
    list(GET vgm_include 0 vgm_include)
    get_filename_component(VGM_PREFIX ${vgm_include}/.. ABSOLUTE)
    unset(vgm_include)
  endif()

  if(fmt_FOUND)
    get_target_property(fmt_include fmt::fmt INTERFACE_INCLUDE_DIRECTORIES)
    get_filename_component(fmt_PREFIX ${fmt_include}/.. ABSOLUTE)
    unset(fmt_include)
  endif()

  if(Flatbuffers_FOUND)
    if(TARGET flatbuffers::flatbuffers)
      get_target_property(flatbuffers_include flatbuffers::flatbuffers INTERFACE_INCLUDE_DIRECTORIES)
    else()
      get_target_property(flatbuffers_include flatbuffers::flatbuffers_shared INTERFACE_INCLUDE_DIRECTORIES)
    endif()
    get_filename_component(Flatbuffers_PREFIX ${flatbuffers_include}/.. ABSOLUTE)
    unset(flatbuffers_include)
  endif()

  if(ROOT_FOUND)
    get_filename_component(ROOT_PREFIX ${ROOT_BINARY_DIR}/.. ABSOLUTE)
  endif()

  if(VMC_FOUND)
    get_target_property(VMC_include VMCLibrary INTERFACE_INCLUDE_DIRECTORIES)
    get_filename_component(VMC_PREFIX ${VMC_include}/../.. ABSOLUTE)
    unset(VMC_include)
  endif()
endmacro()

function(fairroot_summary_package_dependencies)
  fairroot_summary_package_prefix_load()
  if(PROJECT_PACKAGE_DEPENDENCIES)
    message(STATUS "  ${Cyan}DEPENDENCY FOUND     VERSION                   PREFIX${CR}")
    foreach(dep IN LISTS PROJECT_PACKAGE_DEPENDENCIES)
      if(${dep}_VERSION AND NOT ${dep}_VERSION STREQUAL "..")
        set(version_str "${BGreen}${${dep}_VERSION}${CR}")
      else()
        set(version_str "${BYellow}unknown${CR}")
      endif()
      if(PROJECT_${dep}_VERSION)
        set(version_req_str " (>= ${PROJECT_${dep}_VERSION})")
      endif()
      fairroot_pad(${dep} 20 " " dep_padded)
      if(DISABLE_COLOR)
        fairroot_pad("${version_str}${version_req_str}" 25 " " version_padded)
      else()
        fairroot_pad("${version_str}${version_req_str}" 25 " " version_padded COLOR 1)
      endif()

      set(prefix ${${dep}_PREFIX})

      if(NOT ${dep}_BUNDLED)
        message(STATUS "  ${BWhite}${dep_padded}${CR}${version_padded}${prefix}")
      endif()

      if(${dep} STREQUAL Geant3)
        fairroot_pad("G3SYS" 19 " " envvar_padded LEFT)
        message(STATUS "    ${envvar_padded} ${Geant3_SYSTEM_DIR}")
      endif()
      if(${dep} STREQUAL Geant4)
        foreach(dataset IN LISTS Geant4_DATASETS)
          fairroot_pad("${Geant4_DATASET_${dataset}_ENVVAR}" 19 " " envvar_padded LEFT)
          message(STATUS "    ${envvar_padded} ${Geant4_DATASET_${dataset}_PATH}")
        endforeach()
      endif()

      unset(version_str)
      unset(version_padded)
      unset(version_req_str)
    endforeach()
  endif()
endfunction()

function(fairroot_summary_spacer)
  message(STATUS "  ")
endfunction()

function(fairroot_summary_global_cxx_flags)
  if(CMAKE_CXX_FLAGS)
    fairroot_summary_spacer()
    message(STATUS "  ${Cyan}GLOBAL CXX FLAGS${CR}  ${BGreen}${CMAKE_CXX_FLAGS}${CR}")
  endif()
endfunction()

function(fairroot_summary_build_types)
  if(CMAKE_CONFIGURATION_TYPES)
    fairroot_summary_spacer()
    message(STATUS "  ${Cyan}BUILD TYPE         CXX FLAGS${CR}")
    string(TOUPPER "${CMAKE_BUILD_TYPE}" selected_type)
    foreach(type IN LISTS CMAKE_CONFIGURATION_TYPES)
      string(TOUPPER "${type}" type_upper)
      if(type_upper STREQUAL selected_type)
        fairroot_pad("${type}" 18 " " type_padded)
        message(STATUS "${BGreen}* ${type_padded}${CMAKE_CXX_FLAGS_${type_upper}}${CR}")
      else()
        fairroot_pad("${type}" 18 " " type_padded)
        message(STATUS "  ${BWhite}${type_padded}${CR}${CMAKE_CXX_FLAGS_${type_upper}}")
      endif()
      unset(type_padded)
      unset(type_upper)
    endforeach()
    message(STATUS "  ")
    message(STATUS "  (Change the build type with ${BMagenta}-DCMAKE_BUILD_TYPE=...${CR})")
  endif()
endfunction()

function(fairroot_summary_static_analysis)
  if(RUN_STATIC_ANALYSIS)
    list(LENGTH PROJECT_STATIC_ANALYSERS size)
    unset(analyser_list)
    set(count 0)
    foreach(analyser IN LISTS PROJECT_STATIC_ANALYSERS)
      if(${analyser}_FOUND)
        set(${analyser}_status "${analyser} ${BGreen}YES${CR}")
      else()
        set(${analyser}_status "${analyser} ${BRed}NO${CR}")
      endif()
      math(EXPR count "${count} + 1")
      string(APPEND analyser_list "${${analyser}_status}")
      if(count LESS size)
        string(APPEND analyser_list "${BWhite},${CR} ")
      endif()
    endforeach()
    set(static_ana_summary "${BWhite}(${CR}${analyser_list}${BWhite})${CR}  (disable with ${BMagenta}-DRUN_STATIC_ANALYSIS=OFF${CR})")
  else()
    set(static_ana_summary "${BRed}OFF${CR}  (default, enable with ${BMagenta}-DRUN_STATIC_ANALYSIS=ON${CR})")
  endif()
  fairroot_summary_spacer()
  message(STATUS "  ${Cyan}RUN STATIC ANALYSIS  ${static_ana_summary}")
endfunction()

function(fairroot_summary_cxx_standard)
  fairroot_summary_spacer()
  message(STATUS "  ${Cyan}CXX STANDARD${CR}       ${BGreen}C++${CMAKE_CXX_STANDARD}${CR} (>= C++${PROJECT_MIN_CXX_STANDARD}, change with ${BMagenta}-DCMAKE_CXX_STANDARD=17${CR})")
endfunction()

function(fairroot_summary_install_prefix)
  fairroot_summary_spacer()
  message(STATUS "  ${Cyan}INSTALL PREFIX${CR}     ${BGreen}${CMAKE_INSTALL_PREFIX}${CR} (change with ${BMagenta}-DCMAKE_INSTALL_PREFIX=...${CR})")
endfunction()
