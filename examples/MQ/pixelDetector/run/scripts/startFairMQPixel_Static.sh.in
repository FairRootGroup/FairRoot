#!/bin/bash

MAXINDEX="--max-index -1"
TRANSPORT="--transport zeromq"
VERBOSE="--severity DEBUG"
FAIRTASKNAME="--task-name PixelFindHits"
WORKDIR="@PIXEL_FILE_LOCATION@"
DATESTRING=`date +%Y%m%d_%H%M%S`

FORCEKILL=false

while [[ $# > 1 ]]
do
key="$1"

case $key in
    -f|--task-name)
    FAIRTASKNAME="--task-name $2"
    shift
    ;;
    -m|--max-index)
    MAXINDEX="--max-index $2"
    shift
    ;;
    -t|--transport)
    TRANSPORT="--transport $2"
    shift
    ;;
    -w|--work-dir)
    WORKDIR="$2"
    shift
    ;;
    -v|--verbose)
    VERBOSE="--severity $2"
    shift
    ;;
    -k|--force-kill)
    FORCEKILL="$2"
    shift
    ;;
esac
shift 
done

CHECK_BEFORE="$(ps -fea | grep PixelMQConfig_Multipart.json | grep "transport" | grep "control" | grep -v grep)"
if [ -n "$CHECK_BEFORE" ];
then
    echo "some example/MQ/pixel programs are still running:"
    echo $CHECK_BEFORE
    echo "quit them before proceeding."
    if [ "$FORCEKILL" == "true" ];
    then
        echo "trying to kill..."
        ps -fea | grep PixelMQConfig_Multipart.json | grep "transport" | grep "control" | grep -v grep | awk '{print $2}' | xargs kill -9
    else
        return;
    fi
fi

########################### Define some variables
# JSON file containing the configuration parameters of all FairMQ devices of this example
MQCONFIGFILE="$WORKDIR/examples/MQ/pixelDetector/run/options/PixelMQConfig_Multipart.json"
# ASCII and ROOT parameter files for the processor device
ROOTPARAM="$WORKDIR/examples/MQ/pixelDetector/macros/pixel_TGeant3.params.root"
ASCIIPARAM="$WORKDIR/examples/MQ/pixelDetector/param/pixel_digi.par"

if [ "$FAIRTASKNAME" == "--task-name PixelFindHits" ] ; then
    # input file and branch for the sampler device
    INPUTFILE="$WORKDIR/examples/MQ/pixelDetector/macros/pixel_TGeant3.digi.root"
 #   INPUTFILE+=" --file-name $WORKDIR/examples/MQ/pixelDetector/macros/pixel_TGeant3.digi.f1.root"
    INPUTBRANCH="PixelDigis"
    
    # output file for sink
    OUTPUTFILE="$WORKDIR/examples/MQ/pixelDetector/macros/MQ.pixel_TGeant3.hits.root"
    OUTPUTCLASS="--class-name TClonesArray(PixelHit)"
    OUTPUTBRANCH="--branch-name PixelHits"
elif [ "$FAIRTASKNAME" == "--task-name PixelFindTracks" ] ; then
    # input file and branch for the sampler device 
    FAIRTASKNAME+=" --keep-data PixelHits"
    INPUTFILE="$WORKDIR/examples/MQ/pixelDetector/macros/MQ.pixel_TGeant3.hits.root"
    INPUTBRANCH="PixelHits"
    
    # output file for sink
    OUTPUTFILE="$WORKDIR/examples/MQ/pixelDetector/macros/MQ.pixel_TGeant3.hits_tracks.root"
    OUTPUTCLASS="--class-name TClonesArray(PixelHit) --class-name TClonesArray(PixelTrack)"
    OUTPUTBRANCH="--branch-name PixelHits --branch-name PixelTracks"
elif [ "$FAIRTASKNAME" == "--task-name PixelFitTracks" ] ; then
    # input file and branch for the sampler device
    INPUTFILE="$WORKDIR/examples/MQ/pixelDetector/macros/MQ.pixel_TGeant3.hits_tracks.root"
    INPUTBRANCH="PixelHits --branch-name PixelTracks"
    
    # output file for sink
    OUTPUTFILE="$WORKDIR/examples/MQ/pixelDetector/macros/MQ.pixel_TGeant3.fitTracks.root"
    OUTPUTCLASS="--class-name TClonesArray(PixelTrack)"
    OUTPUTBRANCH="--branch-name PixelFitTracks"
else
    echo "TASK $FAIRTASKNAME UNKNOWN!!!"
    exit
fi
###########################

########################### Check if files exist
if [ ! -e $MQCONFIGFILE ] ; then
    echo "MQConfig file ($MQCONFIGFILE) does not exist!"
    exit;
fi
if [ ! -e $ROOTPARAM ] ; then
    echo "RootParam file ($ROOTPARAM) does not exist!"
    exit;
fi
if [ ! -e $ASCIIPARAM ] ; then
    echo "AsciiParam file ($ASCIIPARAM) does not exist!"
    exit;
fi
if [ ! -e $INPUTFILE ] ; then
    echo "Input file ($INPUTFILE) does not exist!"
    exit;
fi

########################### Start the chain of the devices


########################## start Parameter server
SERVER="@FAIRROOT_BIN_LOCATION@/"
SERVER+="parmq-server $TRANSPORT"
SERVER+=" --id parmq-server  --mq-config $MQCONFIGFILE --channel-name data"
SERVER+=" $VERBOSE "
SERVER+=" --first-input-name $ROOTPARAM --second-input-name $ASCIIPARAM --second-input-type ASCII --control static --color false"

########################## start SAMPLER
SAMPLER="@PIXEL_BIN_LOCATION@/"
SAMPLER+="pixel-sampler $TRANSPORT"
SAMPLER+=" --id sampler1  --mq-config $MQCONFIGFILE"
SAMPLER+=" --severity info --ack-channel ack "
SAMPLER+=" --file-name $INPUTFILE --branch-name $INPUTBRANCH --branch-name EventHeader. $MAXINDEX --control static --color false"

########################## start PROCESSORs
PROCESSOR1="@PIXEL_BIN_LOCATION@/"
PROCESSOR1+="pixel-processor $TRANSPORT"
PROCESSOR1+=" $VERBOSE"
PROCESSOR1+=" --id processor1 $FAIRTASKNAME --mq-config $MQCONFIGFILE --control static --color false"

PROCESSOR2="@PIXEL_BIN_LOCATION@/"
PROCESSOR2+="pixel-processor $TRANSPORT"
PROCESSOR2+=" $VERBOSE"
PROCESSOR2+=" --id processor2 $FAIRTASKNAME --mq-config $MQCONFIGFILE --control static --color false"

PROCESSOR3="@PIXEL_BIN_LOCATION@/"
PROCESSOR3+="pixel-processor $TRANSPORT"
PROCESSOR3+=" $VERBOSE"
PROCESSOR3+=" --id processor3 $FAIRTASKNAME --mq-config $MQCONFIGFILE --control static --color false"

########################## start FILESINK
FILESINK="@PIXEL_BIN_LOCATION@/"
FILESINK+="pixel-sink $TRANSPORT"
FILESINK+=" $VERBOSE --ack-channel ack "
FILESINK+=" --id sink1 --mq-config $MQCONFIGFILE"
FILESINK+=" --file-name $OUTPUTFILE --class-name FairEventHeader --branch-name EventHeader. $OUTPUTCLASS $OUTPUTBRANCH --control static --color false"

$SERVER &> server_$DATESTRING.out.log &
SERVER_PID=$!

$SAMPLER &> sampler_$DATESTRING.out.log &
SAMPLER_PID=$!

$PROCESSOR1 &> processor1_$DATESTRING.out.log &
PROCESSOR1_PID=$!

$PROCESSOR2 &> processor2_$DATESTRING.out.log &
PROCESSOR2_PID=$!

$PROCESSOR3 &> processor3_$DATESTRING.out.log &
PROCESSOR3_PID=$!

$FILESINK &> fileSink_$DATESTRING.out.log &
FILESINK_PID=$!

RUN_STRING="Running"

echo   "___________________________________________________________________________________________"
echo   "|     server   |    sampler   |   processor1 |   processor2 |   processor3 |   file sink  |"
printf "| pid = %6d | pid = %6d | pid = %6d | pid = %6d | pid = %6d | pid = %6d |\n" $SERVER_PID $SAMPLER_PID $PROCESSOR1_PID $PROCESSOR2_PID $PROCESSOR3_PID $FILESINK_PID
echo   "|  %CPU    mem |  %CPU    mem |  %CPU    mem |  %CPU    mem |  %CPU    mem |  %CPU    mem |"
for ((i = 0 ; i < 50 ; i++ ));
do
    CHECK_SAMPLER="$(kill -0 $SAMPLER_PID &> /dev/null && echo $RUN_STRING)";
    if [ "$CHECK_SAMPLER" != "$RUN_STRING" ];
    then
	break;
    fi
    SERVER_INFO="$(ps -o %cpu -o rss $SERVER_PID | tail -1)"
    SAMPLER_INFO="$(ps -o %cpu -o rss $SAMPLER_PID | tail -1)"
    PROCESSOR1_INFO="$(ps -o %cpu -o rss $PROCESSOR1_PID | tail -1)"
    PROCESSOR2_INFO="$(ps -o %cpu -o rss $PROCESSOR2_PID | tail -1)"
    PROCESSOR3_INFO="$(ps -o %cpu -o rss $PROCESSOR3_PID | tail -1)"
    FILESINK_INFO="$(ps -o %cpu -o rss $FILESINK_PID | tail -1)"
    printf   "| %5s %6s | %5s %6s | %5s %6s | %5s %6s | %5s %6s | %5s %6s |\r" $SERVER_INFO $SAMPLER_INFO $PROCESSOR1_INFO $PROCESSOR2_INFO $PROCESSOR3_INFO $FILESINK_INFO
    sleep 1;
done;
echo;
echo   "-------------------------------------------------------------------------------------------"
echo "Jobs finished in $i seconds."


kill $SERVER_PID
CHECK_SAMPLER="$(kill -0 $SAMPLER_PID &> /dev/null && echo $RUN_STRING)";
if [ "$CHECK_SAMPLER" == "$RUN_STRING" ];
then
    kill $SAMPLER_PID
fi
kill $PROCESSOR1_PID
kill $PROCESSOR2_PID
kill $PROCESSOR3_PID
kill $FILESINK_PID

echo "Finished gracefully."

# have to wait for the FILESINK process to finish
wait $FILESINK_PID

INPUT_EVENTS="$(echo "cout<<cbmsim->GetEntries()<<endl;" | root -l -b $INPUTFILE | tail -1)"
OUTPUT_EVENTS="$(echo "cout<<cbmsim->GetEntries()<<endl;" | root -l -b $OUTPUTFILE | tail -1)"
echo "There are $INPUT_EVENTS in the input file."
echo "There are $OUTPUT_EVENTS in the output file."

if [ "$OUTPUT_EVENTS" -eq "$INPUT_EVENTS" ];
then
    echo "Shell script finished successfully.";
fi
    
